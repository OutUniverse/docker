编程语言：
1. 熟练掌握Rust，对Rust的语言特性有深刻的认知，如所有权系统、借用检查器、函数式编程、多线程编程、异步编程以及宏编程等 
2. 熟练掌握和使用PHP，对于PHP的底层原理有深刻的理解，如PHP的GC、数据结构的底层实现方式、PHP解释运行的各种方式 
3. 熟练使用JavaScript/Node.js，熟练使用canvas进行图片处理
4. 熟练掌握Java，对Java的OOP思想以及AOP特性有深刻理解
5. 了解C、Lua、Python，可以简单使用

关系型数据库 - MySQL：
1. 熟练掌握MySQL日志系统的工作机制，熟练掌握日志相关配置，能够将日志配置与业务相契合，兼顾系统并发性和数据持久化问题
2. 熟悉MySQL读写分离架构、主从架构，熟悉如何通过MySQL配置、MySQL架构或代码层面等方式控制主从延迟问题
3. 熟练掌握MySQL的四种事务隔离级别和MVCC原理
4. 熟练掌握MySQL的各种锁机制，包括全局锁，表级锁，间隙锁以及行级锁，在开发中可以避免死锁、锁超时引起的各种锁冲突问题
5. 擅长InnoDB表的索引优化，熟练掌握索引的底层数据结构B+Tree
6. 熟练掌握MySQL的各种online DDL操作和inplace DDL操作，能在live环境进行安全的MySQL操作，确保业务连续性
7. 擅长SQL优化，了解order by、count、join等语句的工作原理，能够优化SQL语句提高查询效率，以及诱导MySQL选择正确的索引
8. 了解MySQL的整体架构以及运行机制

NoSQL - Redis：
1. 熟悉Redis主从架构、切片集群、读写分离和哨兵集群的配置，可根据业务需求提供最合适的Redis架构方案
2. 熟悉各种Redis所需的Linux服务器最优配置，有效减少Redis的波动延迟问题，提高Redis可用性
3. 熟练掌握Redis的各种配置，如内存淘汰策略、内存碎片清理机制以及Redis数据持久化配置等，可根据业务提供最优Redis配置方案
4. 熟练掌握Redis及Redis Stack的各种数据类型，可以根据需求选择最合适的数据类型，了解Redis底层的数据结构
5. 熟悉Redis的线程模型，理解Redis慢操作的原因，可以在开发中合理避免相应问题，提高Redis服务稳定性
6. 擅长处理在业务开发过程中，可能会引起的Redis Big key、数据倾斜、缓存雪崩、缓存击穿和缓存穿透等问题
7. 熟练使用Lua脚本完成业务所需的Redis原子操作
8. 擅长使用Redis实现分布式锁解决共享资源并发访问以及高并发问题

消息队列 - RabbitMQ|Redis Pub/Sub：
1. 熟练运用rabbitmq的各种队列类型以及工作模式
2. 熟练使用Redis的Pub/Sub功能完成队列相关功能
3. 熟练使用生产者/消费者模式解决高并发、业务解藕以及消息防丢失等业务问题

容器技术 - Docker|Pod
1. 熟练使用Docker基本命令，熟练使用Dockerfile创建容器
2. 熟练使用Docker Compose命令完成项目容器配置工作
3. 熟练掌握Docker Swarm，可使用Swarm完成容器集群工作

Linux
1. 熟练使用Linux基本命令，如查看系统资源状态、查看系统日志以及文件编辑等
2. 熟练使用apt/apt-get命令进行应用程序管理
3. 熟练使用Crontab工具配置定时任务

其他：
1. 熟练使用OAuth 2.0模式开发项目第三方授权机制，熟练使用AES/RSA加密方式进行数据加密
2. 熟练使用Elasticsearch进行文档更新、索引创建以及搜索功能
3. 熟练使用Git命令行完成代码的版本控制以及协同工作
4. 熟悉supervisor进程管理工具
5. 了解MyCat，能够使用MyCat完成读写分离架构
6. 了解HAProxy以及KeepAlived，可以使用HAProxy和KeepAlived配置高可用的负载均衡架构
7. 学习且使用过Spring、SpringMVC、SpringBoot和SpringCloud等Spring框架
8. 熟练使用jQuery，使用过VUE完成部分前端界面及功能
9. 熟悉Laravel、CI等PHP框架，对于PHP类的自动加载、魔术方法、IOC容器以及依赖注入等都有深刻理解，曾自行设计和优化过PHP框架
10.可流利查看英文文档，擅长根据官方英文文档进行技术学习

自我评价：
性格沉稳，擅于钻研，乐于探索未知领域；
擅于沟通，勇于承担责任，团队协作能力强；
遇事沉着冷静，思路清晰，解决问题能力强
